{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CohensKappa(object):\n",
    "\n",
    "    def __init__(self,true, predicted):\n",
    "\n",
    "        self.true = true\n",
    "        self.predicted = predicted\n",
    "        self.cohen = 0\n",
    "\n",
    "    def setDataSet(self, dataset):\n",
    "        \"\"\"\n",
    "        Set dataset 1\n",
    "        :param dataset:\n",
    "        :return:\n",
    "        \"\"\"\n",
    "\n",
    "        self.dataset = dataset\n",
    "\n",
    "\n",
    "    def getKappa(self):\n",
    "        \"\"\"\n",
    "        get cohen kappa\n",
    "        :return:\n",
    "        \"\"\"\n",
    "        return self.cohen\n",
    "\n",
    "    def ConfusionMatrix(self):\n",
    "        \"\"\"\n",
    "        sklearn computing comfusion matrix\n",
    "        :return:\n",
    "        \"\"\"\n",
    "\n",
    "        print(sklearn.metrics.confusion_matrix(self.true.iloc[:,1],self.predicted.iloc[:,1]))\n",
    "\n",
    "    def ConfusionMatrixRelative(self):\n",
    "        \"\"\"\n",
    "        sklearn computing comfusion matrix\n",
    "        :return:\n",
    "        \"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
